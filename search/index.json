[{"content":"Git 与 Hugo 完整工作流程指南 本指南将详细介绍如何使用 Hugo 和 Git 完成从创建新文件到删除文件的完整工作流程。\n1. 创建新文件 首先，使用 Hugo 命令创建一个新的文章文件。\n1 hugo new content post/TestOne/index.md 这个命令会在 D:\\SoftCache\\TextCache\\HugoCache\\hugo\\dev\\content\\post 目录下创建一个名为 TestOne 的文件夹，并在其中生成一个 index.md 文件。\n2. 将更改添加到 Git 文件创建后，你需要告诉 Git 你的工作目录发生了变化。使用 git add 命令将新创建的文件添加到暂存区。\n1 git add . 这里的 . 代表添加当前目录下的所有更改，包括新创建的文件和对现有文件的修改。\n3. 提交更改 将文件添加到暂存区后，你需要提交这些更改，将其保存为历史记录中的一个版本。\n1 git commit -m \u0026#34;update\u0026#34; -m \u0026quot;update\u0026quot; 后面是本次提交的描述信息，建议写得清晰一些，方便日后查阅。\n4. 推送到远程仓库 提交后，你的更改只保存在本地。要将这些更改同步到 GitHub 等远程仓库，你需要使用 git push 命令。\n1 git push 执行这条命令后，你的本地修改就会被上传到远程仓库，这样其他人也能看到你的最新版本了。\n5. 删除文件 如果需要删除之前创建的文件，最常见且最安全的做法是使用 git rm 命令。\n1 git rm D:\\SoftCache\\TextCache\\HugoCache\\hugo\\dev\\content\\post\\TestOne\\index.md git rm 命令不仅会删除工作目录中的文件，还会同时将这个删除操作标记为暂存状态，为下一次提交做好准备。\n6. 提交删除并推送到远程仓库 删除操作也需要被提交到 Git 历史中。\n提交删除操作： 1 git commit -m \u0026#34;delete TestOne\u0026#34; 推送到远程仓库： 1 git push 完成这些步骤后，TestOne 文件就会从你的本地仓库和远程仓库中都消失了。 ","date":"2025-08-24T16:43:14+08:00","permalink":"https://qyChiba.github.io/Chiba-dev/p/git%E4%B8%8Ehugo%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/","title":"Git与Hugo工作流程"},{"content":"JDBC-入门到高级 一、JDBC搭建： 1.准备数据库\n2.下载连接驱动jar包。\n3.创建Java项目，在项目下创建lib文件夹内，将下载完成的jar包复制到文件夹里面。\n4.选中lib文件夹右键\u0026ndash;\u0026gt;Add as Library(添加为库)，与项目集成。\n5.编写代码\n完整代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package com.Chiba.base; import java.sql.Connection; import java.sql.DriverManager; import java.sql.ResultSet; import java.sql.Statement; public class JDBCQuick { public static \u0026lt;connection\u0026gt; void main(String[] args) throws Exception { // 1.注册驱动 Class.forName(\u0026#34;com.mysql.cj.jdbc.Driver\u0026#34;); // 2.获取连接对象 String url = \u0026#34;jdbc:mysql://localhost:3306/jdbcdemo\u0026#34;; String username = \u0026#34;root\u0026#34;; String password = \u0026#34;mhh.0608\u0026#34;; Connection connection = DriverManager.getConnection(url, username, password); // 3.获取执行sql语句的对象 --\u0026gt;把sql语句发送给mysql的对象 Statement statement = connection.createStatement(); // 4.编写SQL语句，并执行,接受返回的结果集 String sql = \u0026#34;select emp_id,emp_name,emp_salary,emp_age from t_emp;\u0026#34;; ResultSet resultSet = statement.executeQuery(sql); // 5.处理结果，遍历result结果集 while (resultSet.next()) { int empId = resultSet.getInt(\u0026#34;emp_id\u0026#34;); String empName = resultSet.getString(\u0026#34;emp_name\u0026#34;); double empSalary = resultSet.getDouble(\u0026#34;emp_salary\u0026#34;); int empAge = resultSet.getInt(\u0026#34;emp_age\u0026#34;); System.out.println(empId + \u0026#34;\\t\u0026#34; + empName + \u0026#34;\\t\u0026#34; + empSalary + \u0026#34;\\t\u0026#34; + empAge); } // 6.释放资源(遵循先开后关原则)--\u0026gt;目前有connection、statement、resultSet三个资源 resultSet.close(); statement.close(); connection.close(); } } 二、核心API理解 2.1注册驱动 1 Class forname(\u0026#34;com.mysql.cj.jdbc.driver\u0026#34;); 注册驱动是为了和数据库通信，加载驱动程序的目的是为了注册驱动程序，使得JDBC API能够识别并且与特定的数据库进行交互。\n从JDK6开始就不需要写Class forname()来加载JDBC驱动程序，只要在类路径中集成了对应的jar文件，会自动在初始化时注册驱动程序。\n2.2 Connection Connection接口是JDBC API的重要接口，用于建立与数据库通信通道，只要Connection不为空，就代表一次与数据库连接。\n在建立连接时，需要指定数据库URL、用户名、密码。\nURL：jdbc:mysql://localhost:3306/jdbcdemo\njdbc:mysql//IP地址:端口号/数据库名称?参数键值对1\u0026amp;参数键值对2\njdbc:mysql://是固定的 localhost对应着IP地址，这里不是固定的，如果说是买了云服务，那么就要写云服务厂商的数据库IP地址 3306对应的端口号，一般默认的是3306。 斜线分割后对应的jdbcdemo对应的是数据库名称，就是当前要操作那个数据库 如果还有参数要设置添加这时候就不要用/了，要用?隔开，然后写key=value 注：如果你用的是自己的IP地址(localhost)和默认端口号(3306)那么这时候url就可以写：com:mysql:///jdbcdemo\nConnection接口还负责管理事务，Connection接口提供了commit和rollback方法，用于提交事务和回滚事务。\n可以创建Statement对象，用于执行SQL语句并与数据库进行交互。\n在用jdbc技术时，必须先获取connection对象(如果没有获取Connection对象后续的操作不复存在)，Connection也代表的是一次链接，在使用完毕后，要释放资源，避免资源占用浪费和泄露。\n2.3 Statement Statement接口用于执行SQL语句并与数据库进行交互。它是JDBC API中的重要接口。通过Statement对象，可以向数据库发送SQL语句并获取执行结果。\n结果可以是一个或多个结果。\n增删改：受影响行数单个数据。 查询：单行单列、多行多列、单行多列等结果。 Statement接口在执行SQL语句时，会产生SQL注入攻击问题：\n当使用Statement执行动态构建的SQL查询时，往往需要将查询条件与SQL语句拼接在一起，直接将参数和SQL语句一并生成，让SQL的查询条件始终为true得到结果。 2.4PreparedStatement PreparedStatement是Statement接口的子接口，用于执行预编译的SQL查询，作用如下： 预编译SQL语句：在创建PreparedStatement时，就会预编译SQL，也就是SQL语句已经固定。 防止SQL注入：PreparedStatement支持参数化查询，将数据作为参数传递到SQL语句中，采用？占位符的方式，将传入的参数用一对单引号(\u0026rsquo;\u0026rsquo;)包裹起来，无论传递什么都作为值，有效防止传入关键字或值导致SQL注入问题 性能提升：PreparedStatement是预编译SQL语句，同一SQL语句多次执行的情况下，可以复用，不必每次重新编译和解析。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package com.Chiba.base; import java.sql.*; import java.util.Scanner; public class JDBCPrepared { public static void main(String[] args) throws Exception { String url = \u0026#34;jdbc:mysql://localhost:3306/jdbcdemo\u0026#34;; String username = \u0026#34;root\u0026#34;; String password = \u0026#34;mhh.0608\u0026#34;; Connection connection = DriverManager.getConnection(\u0026#34;jdbc:mysql://localhost:3306/jdbcdemo\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;mhh.0608\u0026#34;); PreparedStatement preparedstatement = connection.prepareStatement(\u0026#34;select emp_id,emp_name,emp_salary,emp_age from t_emp where emp_name=?\u0026#34;); Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入姓名\u0026#34;); String name = sc.nextLine(); preparedstatement.setString(1,name); ResultSet resultSet = preparedstatement.executeQuery(); while (resultSet.next()) { int empId = resultSet.getInt(\u0026#34;emp_id\u0026#34;); String empName = resultSet.getString(\u0026#34;emp_name\u0026#34;); double empSalary = resultSet.getDouble(\u0026#34;emp_salary\u0026#34;); int empAge = resultSet.getInt(\u0026#34;emp_age\u0026#34;); System.out.println(empId + \u0026#34;\\t\u0026#34; + empName + \u0026#34;\\t\u0026#34; + empSalary + \u0026#34;\\t\u0026#34; + empAge); } resultSet.close(); preparedstatement.close(); connection.close(); } } 1 select emp_id,emp_name,emp_salary,emp_age from t_emp where emp_name=?； 如果用sql注入的话就是输入：abc\u0026rsquo; or \u0026lsquo;1\u0026rsquo;=\u0026lsquo;1，这时候abc' or '1'='1就会代替问号并且加上两边加上单引号：\n1 select emp_id,emp_name,emp_salary,emp_age from t_emp where emp_name=\u0026#39;abc\u0026#39; or \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;； 这是后看着虽然和用Statement时候注入的形式一样，但是PreparedStatement会在他们中间加上转义字符，使得他们变成普通的值：\n1 select emp_id,emp_name,emp_salary,emp_age from t_emp where emp_name=\u0026#39;abc\\\u0026#39; or \\\u0026#39;1\\\u0026#39;=\\\u0026#39;1\u0026#39;； **总结：**在实际应用中，不要使用Statement类，因为它有sql注入的漏洞，反而我们要统一的使用Statement的子类PreparedStatement类，它不仅可以防止sql注入还可以提高性能，因为它是预编译的,可以复用不需要每次都编译。总而言之，使用``PreparedStatement`更安全、更高效。\n2.5ResultSet ResultSet是JDBC API中的一个接口，用于从数据库中执行查询语句所返回的结果集，它提供了一种用于遍历和访问查询结果的方式。 遍历结果：ResultSet可以使用**next()**方法将游标移动到结果集的下一行，逐行遍历数据库查询的结果，返回值为boolean类型，true表示有下一行的结果，false表示没有。 获取单列结果：可以通过getXxx的方法获取单列的数据，该方法为重载方法 ，支持索引和列名进行获取。 专业术语\u0026ndash;ORM：\nJDBC全流程：注册驱动\u0026mdash;\u0026gt;获取连接\u0026mdash;\u0026gt;预编译获取PreparedStatement对象\u0026mdash;\u0026gt;编写并执行sql语句\u0026mdash;\u0026gt;遍历结果集\u0026mdash;\u0026gt;资源释放\n案例——CURD 查询\u0026ndash;\u0026gt;单行单列： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package com.Chiba.base; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; public class TestDemo { public static void main(String[] args) throws Exception { // 1.驱动注册 Class.forName(\u0026#34;com.mysql.cj.jdbc.Driver\u0026#34;); // 2.获取连接 Connection connection = DriverManager.getConnection(\u0026#34;jdbc:mysql://localhost:3306/jdbcdemo\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;mhh.0608\u0026#34;); // 3.预编译PreparedStatement对象 PreparedStatement preparStatement = connection.prepareStatement(\u0026#34;select count(*) as count from t_emp\u0026#34;); // 4.获取返回值 ResultSet resultSet = preparStatement.executeQuery(); // 5.遍历值 while(resultSet.next()){ int count=resultSet.getInt(\u0026#34;count\u0026#34;); System.out.println(count); } resultSet.close(); preparStatement.close(); connection.close(); } } ","date":"2025-08-23T23:01:38+08:00","image":"https://qyChiba.github.io/Chiba-dev/p/jdbc-%E5%85%A5%E9%97%A8%E5%88%B0%E9%AB%98%E7%BA%A7/MeiGuiHua_hu_469f0924edc03d5b.png","permalink":"https://qyChiba.github.io/Chiba-dev/p/jdbc-%E5%85%A5%E9%97%A8%E5%88%B0%E9%AB%98%E7%BA%A7/","title":"JDBC-入门到高级"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://qyChiba.github.io/Chiba-dev/helena-hertz-wWZzXlDpMog-unsplash.jpg","permalink":"https://qyChiba.github.io/Chiba-dev/p/test-chinese/","title":"Chinese Test"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://qyChiba.github.io/Chiba-dev/helena-hertz-wWZzXlDpMog-unsplash.jpg","permalink":"https://qyChiba.github.io/Chiba-dev/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://qyChiba.github.io/Chiba-dev/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://qyChiba.github.io/Chiba-dev/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://qyChiba.github.io/Chiba-dev/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://qyChiba.github.io/Chiba-dev/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://qyChiba.github.io/Chiba-dev/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://qyChiba.github.io/Chiba-dev/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://qyChiba.github.io/Chiba-dev/p/emoji-support/","title":"Emoji Support"}]